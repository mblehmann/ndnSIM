  RngSeedManager::SetSeed(seed);
  RngSeedManager::SetRun(run);  

  AnnotatedTopologyReader topologyReader("", 1);
  topologyReader.SetFileName("/home/matheus/icn-2016/" + topology);
  topologyReader.Read();

  NodeContainer routerNodes;
  for (uint32_t i = 0; i < n_routers; i++)
  {
    routerNodes.Add(Names::Find<Node>("Node" + to_string(i)));
  }

  NodeContainer userNodes;
  userNodes.Create(n_users);

  PointToPointHelper p2p;
  for (uint32_t i = 0; i < n_routers; i++)
  {
    for (uint32_t j = 0; j < n_users; j++)
    {
      p2p.Install(routerNodes.Get(i), userNodes.Get(j));
    }
  }

  // Install NDN stack on all nodes
  ndn::StackHelper ndnHelper;
  ndnHelper.SetOldContentStore("ns3::ndn::cs::Stats::Lru", "MaxSize", to_string(cache_size));
  ndnHelper.SetDefaultRoutes(true);
  ndnHelper.InstallAll();

  //Config::Connect("/NodeList/*/$ns3::ndn::cs::Stats::Lru/WillRemoveEntry", MakeCallback(CacheEntryRemoved));

  // Choosing forwarding strategy
  ndn::StrategyChoiceHelper::InstallAll("/", "/localhost/nfd/strategy/multicast");
  ndn::StrategyChoiceHelper::InstallAll("/hint", "/localhost/nfd/strategy/multicast");
  ndn::StrategyChoiceHelper::InstallAll("/vicinity", "/localhost/nfd/strategy/multicast");

  // Installing applications
  Ptr<ns3::ndn::Catalog> catalog = Create<ns3::ndn::Catalog>();
  for (uint32_t i = 0; i < n_routers; i++)
  {
    catalog->addRouter(routerNodes.Get(i));
  }
  for (uint32_t i = 0; i < n_users; i++)
  {
    catalog->addUser(userNodes.Get(i));
  }

  catalog->setMaxSimulationTime(simulation_time);
  catalog->setUserPopulationSize(n_users);
  catalog->setPopularity(popularity_alpha, max_consumers);
  catalog->setObjectPopularityVariation(0);
  catalog->setObjectSize(size_mean, size_stddev);
//  catalog->setObjectLifetime(lifetime_mean, lifetime_stddev);
  catalog->initializeCatalog();

  // Initialize positions of nodes
  Ptr<ListPositionAllocator> positionAlloc = CreateObject<ListPositionAllocator>();
  for (uint32_t i = 0; i < n_routers; i++) {
    positionAlloc->Add(Vector(i, 0, 0));
  }

  Ptr<UniformRandomVariable> initialization = CreateObject<UniformRandomVariable>();

  // User
  uint32_t producers = 0;
  for (uint32_t i = 0; i < n_users; i++) {
    Time publishTime = Minutes(initialization->GetValue(min_publish_time.GetMinutes(), max_publish_time.GetMinutes()));
    uint32_t pos = (uint32_t) initialization->GetValue(0, n_routers);

    ndn::AppHelper consumerHelper("ns3::ndn::MobileUser");
    consumerHelper.SetPrefix("/prod" + to_string(i));
    consumerHelper.SetAttribute("Postfix", StringValue("/obj"));
    consumerHelper.SetAttribute("InitialWindowSize", UintegerValue(window_size));
    consumerHelper.SetAttribute("PayloadSize", UintegerValue(payload_size));
    if (producers < catalog_size)
    {
      consumerHelper.SetAttribute("PublishTime", StringValue(to_string(publishTime.ToDouble(Time::MIN)) + "min"));
      producers++;
    }
    consumerHelper.SetAttribute("VicinitySize", UintegerValue(vicinity_size));
    consumerHelper.SetAttribute("ReplicationDegree", UintegerValue(replication_degree));
    consumerHelper.SetAttribute("CacheSize", UintegerValue(cache_size));
    consumerHelper.SetAttribute("Catalog", PointerValue(catalog));
    consumerHelper.Install(userNodes.Get(i));

    for (uint32_t j = 0; j < n_routers; j++) {
      ndn::LinkControlHelper::FailLink(routerNodes.Get(j), userNodes.Get(i));
    }

    ndn::LinkControlHelper::UpLink(routerNodes.Get(pos), userNodes.Get(i));
  }

  MobilityHelper mobility;

  // Initialize positions of nodes
  mobility.SetPositionAllocator(positionAlloc);

  mobility.SetMobilityModel("ns3::OnOffMobilityModel",
                            "Movement", PointerValue(movement),
                            "Session", PointerValue(session),
                            "PositionAllocator", PointerValue(positionAlloc));

  for (uint32_t i = 0; i < n_users; i++) {
    mobility.Install(userNodes.Get(i));
  }
  
  Simulator::Stop(simulation_time);

  ndn::L3RateTracer::InstallAll(inputfile + "_rate-trace.txt", Seconds(1));
  ndn::CsTracer::InstallAll(inputfile + "_cs-trace.txt", Seconds(1));
  ndn::AppDelayTracer::InstallAll(inputfile + "_app-delays-trace.txt");

  Simulator::Run();
  Simulator::Destroy();

  return 0;
}

} // namespace ns3

int
main(int argc, char* argv[])
{
  return ns3::main(argc, argv);
}
